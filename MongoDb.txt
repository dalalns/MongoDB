{"address": {"building": "1007", "coord": [-73.856077, 40.848447], "street": "Morris Park Ave", "zipcode": "10462"}, "borough": "Bronx", "cuisine": "Bakery", "grades": [{"date": {"$date": 1393804800000}, "grade": "A", "score": 2}, {"date": {"$date": 1378857600000}, "grade": "A", "score": 6}, {"date": {"$date": 1358985600000}, "grade": "A", "score": 10}, {"date": {"$date": 1322006400000}, "grade": "A", "score": 9}, {"date": {"$date": 1299715200000}, "grade": "B", "score": 14}], "name": "Morris Park Bake Shop", "restaurant_id": "30075445"}

show dbs; // list existing db 
use dbname; // to create a db
mongo -u <username> -p <password> --authenticationDatabase <dbname> //login into the db
db; //to check current selected db
db.auth("username", "password"); // to authentication of Database
db.logout() //to logout of current db

db.restaurants.remove({}) //to remove all records from db

show collections; // List down collections of the current database
db.getCollectionNames();


show users;// List down all the users of current database
db.getUsers();// List down all the users of current database

show roles; // List down all the roles


db.createCollection("collectionName"); //to create a collection


db.<collectionName>.insert({field1: "value", field2: "value"}) // Insert single document

db.<collectionName>.insert([{field1: "value1"}, {field1: "value2"}]) // Insert multiple documents

// Retrieve all records
db.<collectionName>.find();
// Retrieve limited number of records; Following command will print 10 results;
db.<collectionName>.find().limit(10);
// Retrieve records by id
db.<collectionName>.find({"_id": ObjectId("someid")});
// Retrieve values of specific collection attributes by passing an object having 
// attribute names assigned to 1 or 0 based on whether that attribute value needs 
// to be included in the output or not, respectively.
db.<collectionName>.find({"_id": ObjectId("someid")}, {field1: 1, field2: 1});
db.<collectionName>.find({"_id": ObjectId("someid")}, {field1: 0}); // Exclude field1
// Collection count
db.<collectionName>.count();
db.<collectionName>.stats()
db.printCollectionStats()
// Latency statistics for read, writes operations including average time taken for reads, writes
// and related umber of operations performed
db.<collectionName>.latencyStats()
// Get collection size for data and indexes
db.<collectionName>.dataSize() // Size of the collection
db.<collectionName>.storageSize() // Total size of document stored in the collection
db.<collectionName>.totalSize() // Total size in bytes for both collection data and indexes
db.<collectionName>.totalIndexSize() // Total size of all indexes in the collection

Write a MongoDB query to display all the documents in the collection restaurants.
db.restaurants.find()

Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
db.restaurants.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1});

Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
db.restaurants.find({},{"restaurant_id":1,"name":1,"borough":1,"cuisine":1,"_id":0});

Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
db.restaurants.find({},{"restaurant_id":1,"name":1,"borough":1,"address.zipcode":1,"_id":0});

Write a MongoDB query to display all the restaurant which is in the borough Bronx
db.restaurants.find({"borough":"Bronx"});

Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
db.restaurants.find({"borough":"Bronx"}).limit(5);

Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
db.restaurants.find({"borough":"Bronx"}).skip(5).limit(5);

Write a MongoDB query to find the restaurants who achieved a score more than 90. 
db.restaurants.find({grades : {$elemMatch:{"score":{$gt : 90}}}});

Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
db.restaurants.find({grades : {$elemMatch:{"score":{$gt : 80,$lt:100}}}});

Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
db.restaurants.find({"address.coord" : {$lt : -95.754168}});

Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
db.restaurants.find(
               {$and:
                    [
                       {"cuisine" : {$ne :"American "}},
                       {"grades.score" : {$gt : 70}},
                       {"address.coord" : {$lt : -65.754168}}
                    ]
                }
                    );

without using and
db.restaurants.find(
                           {
                             "cuisine" : {$ne : "American "},
                             "grades.score" :{$gt: 70},
                             "address.coord" : {$lt : -65.754168}
                            }
                     );					

Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order. 

db.restaurants.find(
                           {
                             "cuisine" : {$ne : "American "},
                             "grades.grade" :"A",
                             "borough" : {$ne : "Brooklyn"}
                            }
                     ).sort({"cuisine":-1});

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
db.restaurants.find({"name": /^Wil/},
						{"restaurant_id":1,
						"borough":1,
						"cuisine":1}
                           
                     );
					 
					 
Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
db.restaurants.find({"name": /ces$/},
						{"restaurant_id":1,
						"borough":1,
						"cuisine":1}
                           
                     );					 

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
					 
db.restaurants.find({"name": /.*Reg.*/},
						{"restaurant_id":1,
						"borough":1,
						"cuisine":1}
                           
                     );

Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.

db.restaurants.find(
{ 
"borough": "Bronx" , 
$or : [
{ "cuisine" : "American " },
{ "cuisine" : "Chinese" }
] 
} 
);

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.
db.restaurants.find(
{"borough" :{$nin :["Staten Island","Queens","Bronx","Brooklyn"]}},
{
"restaurant_id" : 1,
"name":1,"borough":1,
"cuisine" :1
}
);

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
db.restaurants.find(
{
"restaurant_id" : 1,
"name":1,
"borough":1,
"cuisine" :1
},
$and :[
{"grades.score" :{$lt: [
{ "cuisine" : "American " },
{ "cuisine" : "Chinese" }
]}}
]
);

Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.

db.restaurants.find(
{
"restaurant_id" : 1,
"name":1,
"borough":1,
"cuisine":1
},
$and :[
{"cuisine" :{$nin: ["American",Chinese]}},
{"name": /^Wil/}
]
);
